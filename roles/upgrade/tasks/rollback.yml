---
- name: Snapshot data file status
  stat:
    path: "{{ snapshot_data_file }}"
  register: snapdata

- name: Check that snapshot data file exists
  assert:
    that: snapdata.stat.exists
    msg: "The snapshot data file {{ snapshot_data_file }} is missing. Automated LVM rollback not possible."

- name: Verify snapshots are good to rollback
  shell: |
    set -o pipefail
    while read snapline; do
      snapdata=($snapline)
      vg=${snapdata[0]}
      lv=snap_${snapdata[1]}
      eval $(lvs --noheadings --nameprefixes -o snap_percent,lv_snapshot_invalid ${vg}/${lv} || echo false)
      if [[ $? -ne 0 ]]; then
        echo "Fatal error while checking snapshot volume ${vg}/${lv}." | tee -a {{ log_file }}
        exit 1
      elif [[ $LVM2_LV_SNAPSHOT_INVALID || $LVM2_SNAP_PERCENT =~ ^100 ]]; then
        echo "Snapshot volume ${vg}/${lv} is invalid or exceeded 100%. LVM rollback not possible." | tee -a {{ log_file }}
        exit 1
      fi
    done < {{ snapshot_data_file }}
  args:
    executable: /bin/bash
  changed_when: false

- name: Merge snapshots and restore boot configuration
  shell: |
    set -o pipefail
    while read snapline; do
      snapdata=($snapline)
      vg=${snapdata[0]}
      lv=snap_${snapdata[1]}
      /usr/sbin/lvm lvconvert --merge ${vg}/${lv} 2>&1 | tee -a {{ log_file }} || exit 1
    done < {{ snapshot_data_file }}
    ( cd /boot &&
    rel=$(<{{ snapshot_kernel_release_file }}) &&
    mv config-snapshot config-$rel &&
    mv initramfs-snapshot.img initramfs-$rel.img &&
    mv symvers-snapshot.gz symvers-$rel.gz &&
    mv System.map-snapshot System.map-$rel &&
    mv vmlinuz-snapshot vmlinuz-$rel &&
    mv grub2/grub.cfg.preupg grub2/grub.cfg &&
    rm -f {{ snapshot_kernel_release_file }} ) 2>&1 | tee -a {{ log_file }}
  args:
    executable: /bin/bash

- name: Save log files before rolling back
  shell: |
    eval $(lvs $(findmnt --noheadings -o SOURCE -T /var/log) --noheadings --nameprefixes -o vg_name,lv_descendants)
    device=/dev/$LVM2_VG_NAME/$LVM2_LV_DESCENDANTS
    origmp=$(findmnt --noheadings -o TARGET -T /var/log)
    if [[ -h $device ]]; then
      tmpmp=$(mktemp -d)
      if mount -o nouuid $device $tmpmp; then
        cp -p /var/log/ripu/* $tmpmp/$(echo /var/log | sed "s%^${origmp}%%")/ripu/
        cp -rp /var/log/leapp/* $tmpmp/$(echo /var/log | sed "s%^${origmp}%%")/leapp/
        umount $tmpmp && rmdir $tmpmp
      fi
    fi
  args:
    executable: /bin/bash
  ignore_errors: true

- name: Reboot to finish rolling back
  reboot:
    msg: 'Host is rolling back now!'
    post_reboot_delay: 60
    reboot_timeout: 7200

- name: Boom entry removal
  shell: |
    rm -fv $(grep -lr ^linux./vmlinuz-snapshot /boot/loader/entries) 2>&1 | tee -a {{ log_file }}

- name: Run postrollback hooks
  shell: |
    set -o pipefail
    for exe in $(find /root/preupgrade/postrollback.d -type f -executable); do
      echo "Running $exe..." | tee -a {{ log_file }}
      ( cd ${exe%/*} && ./${exe##*/} ) 2>&1 | tee -a {{ log_file }}
      if [[ $? -ne 0 ]]; then
        echo "Fatal error while running postrollback hook $exe" | tee -a {{ log_file }}
        exit 1
      fi
    done
  args:
    executable: /bin/bash

