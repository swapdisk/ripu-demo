---
- name: Verify no inhibitor results found during preupgrade
  shell: |
    set -o pipefail
    echo 'Checking preupgrade results:' | tee -a {{ log_file }}
    ( head -1 {{ result_filename }} | grep -v inhibitor ) 2>&1 | tee -a {{ log_file }}
  args:
    executable: /bin/bash
  register: results
  changed_when: false
  failed_when: results.rc != 0 or results.stdout.find('fail') != -1 or results.stdout.find('error') != -1

- name: Create snapshot
  debug:
    msg: 'FIXME: snapshot needs to happen here!'

- name: Run preupgrade hooks
  shell: |
    set -o pipefail
    for exe in $(find /root/preupgrade/preupgrade-scripts -type f -executable); do 
      echo "Running $exe..." | tee -a {{ log_file }}
      ( cd ${exe%/*} && ./${exe##*/} ) 2>&1 | tee -a {{ log_file }}
      if [[ $? -ne 0 ]]; then
        echo "Fatal error while running preupgrade hook $exe" | tee -a {{ log_file }}
        exit 1
      fi
    done
  args:
    executable: /bin/bash

- name: Start Leapp OS upgrade
  shell: |
    set -o pipefail
    modprobe -r btrfs
    leapp upgrade {{ leapp_upgrade_opts }} 2>&1 | tee -a {{ log_file }}
  args:
    executable: /bin/bash

- name: Reboot to continue Leapp OS upgrade
  reboot:
    msg: "Host is starting Leapp OS upgrade now!"
    post_reboot_delay: 60
    reboot_timeout: 43200

- name: Wait for Leapp firstboot phase to finish
  debug:
    msg: 'FIXME: add unitl task here!'

- name: Run postupgrade hooks
  shell: |
    set -o pipefail
    for exe in $(find /root/preupgrade/postupgrade.d -type f -executable); do 
      echo "Running $exe..." | tee -a {{ log_file }}
      ( cd ${exe%/*} && ./${exe##*/} ) 2>&1 | tee -a {{ log_file }}
      if [[ $? -ne 0 ]]; then
        echo "Fatal error while running postupgrade hook $exe" | tee -a {{ log_file }}
        exit 1
      fi
    done
  args:
    executable: /bin/bash

- name: RIPU in-place OS upgrade is done
  debug:
    msg: 'The in-place OS upgrade is now complete. Engage your partner teams to begin application validation.'

